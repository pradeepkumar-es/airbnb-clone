* {
  box-sizing: border-box; /*will alter the default box-sizing property of browser in 
                          which height and width are decided by content without 
                          including padding, border or margin, but by using 
                         box-sizing:border-box we also include padding, border but not margin  */
}
* {
  margin: 0;
  font-family: Poppins;
}
nav {
  box-shadow: 0px 2px 5px #e5e5e5;
  width: auto;
  height: 70px;
  /* gap: 0px; */
  /* opacity: 0px; */
  /* box-shadow: 0px 2.98px 7.46px 0px #0000001A; */
  padding: 22px 30px;
}
.nav-logo {
  max-width: 100px; /*to avoid streching of image*/
}
.image-grid {
  margin: auto;
  width: 395.91px;
  display: block;
  /* justify-content: center; */
}
.hero {
  padding: 20px;
}
.hero > h2 {
  margin: 16px 0px;
  font-size: 36px;
  font-weight: 600;
  line-height: 39.6px;
  text-align: left;
}
.hero > p {
  font-size: 16px;
  font-weight: 300;
  line-height: 17.6px;
  text-align: left;
}
.card{
  position: relative;
  /*
  Elements are positioned relative to their normal position.
The top, right, bottom, and left properties will adjust the
 element from its normal position without affecting the layout around it.
  */
  width: 175px;
  padding: 9px;
  display: flex;
  flex-direction: column;
  /* font-size: 12px; */
  font-size: 0.75rem;
  flex: 0 0 auto; /*
                  The flex property is a shorthand for
                  three CSS properties: flex-grow, flex-shrink, and flex-basis. The values 0 0 auto correspond to:
                  */
}
.card-title{
  font-size: 0.75rem;
  font-weight: normal;
  overflow: hidden;
  text-overflow: ellipsis;
}
.card-img{
width: 100%;
height: 235px;
border-radius: 9px;
}
.rating{
  padding-top: 2px;
  display: flex;
  gap: 3px;
}
.gray{
  color:#918E9B;
}
.star{
  height: 14px;
}
.cards-list{
  display: flex;
  flex-wrap: nowrap;
  gap: 20px;
  overflow-x: auto;
}
.card-price {
  margin-top: auto;
}
.card-badge {
  position: absolute;
  /* here card-badge is relative to card which has position:relative
  absolute:
Elements are positioned relative to the nearest positioned ancestor (an ancestor with a position other than static).
If no such ancestor exists, it is positioned relative to the initial containing block (usually the viewport).
The top, right, bottom, and left properties are used to position the element.
  */
  top: 15px;
  left: 15px;
  background-color: white;
  padding: 5px 7px;
  border-radius: 2px;
  font-weight: bold;
}
